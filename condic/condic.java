// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: condic-lex.java

import java.util.*;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class condic {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\13\0\3\1\22\0\1\2\1\3\5\0\1\4\1\5"+
    "\1\6\1\7\1\10\1\0\1\11\1\0\1\7\12\12"+
    "\1\13\1\14\1\15\1\16\1\15\2\0\32\17\4\0"+
    "\1\20\1\0\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\17\1\27\1\30\1\17\1\31\1\32\5\17\1\33"+
    "\1\34\1\35\1\36\1\17\1\37\3\17\1\40\1\0"+
    "\1\41\7\0\1\1\u01a2\0\2\1\326\0\u0100\1";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\60\0\1\3\70\0\1\3"+
    "\11\0\1\4\30\0\1\4\5\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\42\0\42\0\104\0\146\0\210\0\252\0\314"+
    "\0\356\0\u0110\0\u0132\0\u0154\0\u0176\0\u0198\0\u01ba\0\u01dc"+
    "\0\u01fe\0\u0220\0\u0242\0\u0264\0\u0286\0\u02a8\0\u02ca\0\u02ec"+
    "\0\u030e\0\u0330\0\u0352\0\u0374\0\u0396\0\u03b8\0\u03da\0\u03fc"+
    "\0\u041e\0\u0440\0\u0462\0\u0484\0\u04a6\0\u04c8\0\u04ea\0\u050c"+
    "\0\u052e\0\u0550\0\u0572\0\u0594\0\u05b6\0\u05d8\0\u05fa\0\u061c"+
    "\0\u063e\0\u0660\0\u0682\0\u06a4\0\u06c6\0\u06e8\0\u070a\0\u072c"+
    "\0\u074e\0\u0770\0\u0792\0\u07b4\0\u07d6\0\u07f8\0\u081a\0\u083c"+
    "\0\u085e\0\u0880\0\u08a2\0\u08c4\0\u08e6\0\u0908\0\u092a\0\u094c"+
    "\0\u096e\0\u0990\0\u09b2\0\u09d4\0\u09f6\0\u0a18\0\u0a3a\0\u0a5c"+
    "\0\u0a7e\0\u0aa0\0\u0ac2\0\u0ae4\0\u0b06\0\u0b28\0\u0b4a\0\u0b6c"+
    "\0\u0b8e\0\u0bb0\0\u0bd2\0\u0bf4\0\u0c16\0\u0c38\0\u0c5a\0\u0c7c"+
    "\0\u0c9e\0\u0cc0\0\u0ce2\0\u0d04\0\u0d26\0\u0d48\0\u0d6a\0\u0d8c"+
    "\0\u0dae\0\u0dd0\0\u0df2\0\u0e14\0\u0e36\0\u0e58\0\42\0\u0e7a"+
    "\0\u0e9c\0\u0ebe\0\u0ee0\0\u0f02\0\u0f24\0\u0f46\0\u0f68\0\u0f8a"+
    "\0\u0fac\0\u0fce\0\u0ff0\0\u1012\0\u1034\0\u1056\0\u1078\0\u109a"+
    "\0\u10bc\0\u10de\0\u1100\0\u1122\0\u1144\0\u1166\0\u1188\0\u11aa"+
    "\0\u11cc\0\u11ee\0\u1210\0\u1232\0\u1254\0\u1276\0\u1298\0\u12ba"+
    "\0\u12dc\0\42\0\u12fe\0\u1320\0\u1342\0\u1364\0\u1386";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\26\2\1\4\3\2\1\5\5\2\70\0"+
    "\1\6\52\0\1\7\4\0\1\10\67\0\1\11\16\0"+
    "\1\12\71\0\1\13\16\0\1\14\4\0\1\15\1\16"+
    "\17\15\25\0\1\17\21\0\1\20\6\0\1\14\2\0"+
    "\1\21\1\20\26\0\1\20\6\0\1\22\2\0\1\21"+
    "\1\20\1\15\1\22\17\15\14\0\1\23\4\0\21\23"+
    "\31\0\1\24\30\0\1\25\35\0\1\26\3\0\1\25"+
    "\1\27\1\30\17\27\5\0\1\20\6\0\1\22\2\0"+
    "\1\21\1\20\1\0\1\22\24\0\1\20\6\0\1\23"+
    "\2\0\1\21\1\20\21\23\7\0\1\31\46\0\1\26"+
    "\4\0\1\27\1\30\17\27\10\0\1\32\3\0\1\26"+
    "\35\0\1\32\3\0\1\33\4\0\1\27\1\33\17\27"+
    "\14\0\1\34\4\0\21\34\21\0\1\35\1\36\17\35"+
    "\42\0\1\37\7\0\1\32\3\0\1\33\5\0\1\33"+
    "\27\0\1\32\3\0\1\34\4\0\21\34\10\0\1\40"+
    "\3\0\1\41\4\0\1\35\1\41\17\35\14\0\1\42"+
    "\4\0\21\42\21\0\1\43\1\44\17\43\42\0\1\45"+
    "\7\0\1\40\3\0\1\41\5\0\1\41\27\0\1\40"+
    "\3\0\1\42\4\0\21\42\12\0\1\46\1\47\1\50"+
    "\3\0\1\51\1\43\1\50\17\43\14\0\1\52\4\0"+
    "\21\52\25\0\1\53\26\0\1\54\42\0\1\54\40\0"+
    "\1\46\1\47\1\50\3\0\1\51\1\0\1\50\33\0"+
    "\1\55\4\0\1\56\1\57\17\56\12\0\1\46\1\47"+
    "\1\52\3\0\1\51\21\52\23\0\1\60\34\0\1\61"+
    "\34\0\3\62\1\55\36\0\3\62\1\63\4\0\1\56"+
    "\1\63\17\56\14\0\1\64\4\0\21\64\36\0\1\65"+
    "\24\0\1\43\1\44\17\43\1\0\1\66\12\0\1\67"+
    "\4\0\1\70\1\71\17\70\11\0\3\62\1\63\5\0"+
    "\1\63\30\0\3\62\1\64\4\0\21\64\27\0\1\72"+
    "\41\0\1\73\26\0\1\67\1\0\1\61\37\0\1\74"+
    "\1\0\1\61\2\0\1\70\1\74\17\70\14\0\1\75"+
    "\4\0\21\75\4\0\1\76\71\0\1\77\21\0\1\74"+
    "\1\0\1\61\3\0\1\74\33\0\1\75\1\0\1\61"+
    "\2\0\21\75\6\0\1\100\5\0\1\101\63\0\1\102"+
    "\24\0\1\103\1\0\17\103\14\0\1\101\1\104\53\0"+
    "\1\105\20\0\1\106\60\0\1\53\14\0\1\107\3\0"+
    "\1\110\52\0\1\104\45\0\1\111\1\112\17\111\42\0"+
    "\1\113\11\0\1\114\1\115\1\116\3\0\1\117\1\111"+
    "\1\116\17\111\14\0\1\120\4\0\21\120\21\0\1\121"+
    "\1\122\17\121\12\0\1\123\42\0\1\123\40\0\1\114"+
    "\1\115\1\116\3\0\1\117\1\0\1\116\33\0\1\124"+
    "\4\0\1\125\1\126\17\125\12\0\1\114\1\115\1\120"+
    "\3\0\1\117\21\120\12\0\1\127\1\130\1\131\3\0"+
    "\1\132\1\121\1\131\17\121\14\0\1\133\4\0\21\133"+
    "\16\0\1\134\34\0\3\135\1\124\36\0\3\135\1\136"+
    "\4\0\1\125\1\136\17\125\14\0\1\137\4\0\21\137"+
    "\12\0\1\140\42\0\1\140\40\0\1\127\1\130\1\131"+
    "\3\0\1\132\1\0\1\131\33\0\1\141\4\0\1\142"+
    "\1\143\17\142\12\0\1\127\1\130\1\133\3\0\1\132"+
    "\21\133\21\0\1\111\1\112\1\111\1\144\15\111\14\0"+
    "\1\145\4\0\1\146\1\147\17\146\11\0\3\135\1\136"+
    "\5\0\1\136\30\0\3\135\1\137\4\0\21\137\16\0"+
    "\1\150\34\0\3\151\1\141\36\0\3\151\1\152\4\0"+
    "\1\142\1\152\17\142\14\0\1\153\4\0\21\153\12\0"+
    "\1\114\1\115\1\116\3\0\1\117\1\111\1\116\12\111"+
    "\1\154\4\111\14\0\1\145\1\0\1\134\37\0\1\155"+
    "\1\0\1\134\2\0\1\146\1\155\17\146\14\0\1\156"+
    "\4\0\21\156\21\0\1\121\1\122\17\121\1\0\1\157"+
    "\12\0\1\160\4\0\1\161\1\162\17\161\11\0\3\151"+
    "\1\152\5\0\1\152\30\0\3\151\1\153\4\0\21\153"+
    "\12\0\1\114\1\115\1\116\3\0\1\117\1\111\1\116"+
    "\4\111\1\163\12\111\14\0\1\155\1\0\1\134\3\0"+
    "\1\155\33\0\1\156\1\0\1\134\2\0\21\156\14\0"+
    "\1\160\1\0\1\150\37\0\1\164\1\0\1\150\2\0"+
    "\1\161\1\164\17\161\14\0\1\165\4\0\21\165\12\0"+
    "\1\114\1\115\1\116\3\0\1\117\1\111\1\116\1\166"+
    "\16\111\14\0\1\164\1\0\1\150\3\0\1\164\33\0"+
    "\1\165\1\0\1\150\2\0\21\165\12\0\1\114\1\115"+
    "\1\116\3\0\1\117\1\111\1\116\10\111\1\167\6\111"+
    "\12\0\1\114\1\115\1\116\1\0\1\170\1\0\1\117"+
    "\1\111\1\116\17\111\43\0\1\171\23\0\1\53\1\172"+
    "\42\0\1\173\42\0\1\174\34\0\1\175\56\0\1\176"+
    "\35\0\1\177\44\0\1\200\17\0\1\201\66\0\1\202"+
    "\20\0\1\203\1\204\17\203\12\0\1\205\1\206\1\207"+
    "\3\0\1\210\1\203\1\207\17\203\14\0\1\211\4\0"+
    "\21\211\12\0\1\212\42\0\1\212\40\0\1\205\1\206"+
    "\1\207\3\0\1\210\1\0\1\207\33\0\1\213\4\0"+
    "\1\214\1\215\17\214\12\0\1\205\1\206\1\211\3\0"+
    "\1\210\21\211\16\0\1\216\34\0\3\217\1\213\36\0"+
    "\3\217\1\220\4\0\1\214\1\220\17\214\14\0\1\221"+
    "\4\0\21\221\21\0\1\203\1\204\17\203\1\0\1\222"+
    "\12\0\1\223\4\0\1\224\1\225\17\224\11\0\3\217"+
    "\1\220\5\0\1\220\30\0\3\217\1\221\4\0\21\221"+
    "\14\0\1\223\1\0\1\216\37\0\1\226\1\0\1\216"+
    "\2\0\1\224\1\226\17\224\14\0\1\227\4\0\21\227"+
    "\14\0\1\226\1\0\1\216\3\0\1\226\33\0\1\227"+
    "\1\0\1\216\2\0\21\227\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5032];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\2\1\60\0\1\1\70\0\1\11\11\0"+
    "\1\1\30\0\1\11\5\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
 List<String> if_condic = new ArrayList();
 List<String> switch_condic = new ArrayList();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  condic(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  System.out.print("If: \n");
  for(int i=0;i<if_condic.size();i++){
    if(i==if_condic.size()-1)
     System.out.println(if_condic.get(i));
    else
     System.out.print(if_condic.get(i)+"\n");
  }
  System.out.print("\n");
  System.out.print("Switch: \n");
  for(int i=0;i<switch_condic.size();i++){
    if(i==switch_condic.size()-1)
     System.out.println(switch_condic.get(i));
    else
     System.out.print(switch_condic.get(i)+"\n");
  }

    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { 
            }
            // fall through
          case 5: break;
          case 2:
            { System.out.print(yytext());
            }
            // fall through
          case 6: break;
          case 3:
            { if_condic.add(yytext());
            }
            // fall through
          case 7: break;
          case 4:
            { switch_condic.add(yytext());
            }
            // fall through
          case 8: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java condic [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        condic scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new condic(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
